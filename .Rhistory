library(reticulate)
use_condaenv('r-reticulate')
py_config()
library(reticulate)
use_condaenv('dummy')
#
np = import('numpy', as = 'np', convert = F)
sk = import('skimage', as ='sk', convert = F)
scp = import('scipy', as = 'scp', convert = F)
tfl = import('tifffile', as = 'tfl', convert = F)
nap = import('napari', as = 'nap', convert = F)
library(reticulate)
use_condaenv('r-reticulate')
#
np = import('numpy', as = 'np', convert = F)
sk = import('skimage', as ='sk', convert = F)
scp = import('scipy', as = 'scp', convert = F)
tfl = import('tifffile', as = 'tfl', convert = F)
nap = import('napari', as = 'nap', convert = F)
library(reticulate)
use_condaenv('dummy')
#
np = import('numpy', as = 'np', convert = F)
sk = import('skimage', as ='sk', convert = F)
scp = import('scipy', as = 'scp', convert = F)
tfl = import('tifffile', as = 'tfl', convert = F)
nap = import('napari', as = 'nap', convert = F)
library(EBImage)
library(RBioFormats)
#
library(magrittr)
library(xml2)
ips = list.files('MICROGRAPHS', full.names = T) # list file names inf image folder and store in array
#
met =  lapply(ips,read.metadata);names(met) = basename(ips)
ome = lapply(ips,function(ipi)read.omexml(ipi));names(ome) = basename(ips) # read OME-metadata as xml
ome = lapply(ome,function(x)read_xml(x) %>% as_list()) # parse OME-XML
#
str(ome[[1]]) # overview of OME-XML structure, after conversion to list
str(met[[1]]$coreMetadata) # overview of base image metadata
#
ps = sapply(c('PhysicalSizeZ','PhysicalSizeY','PhysicalSizeX'),function(s)attr(ome[[1]]$OME$Image$Pixels,s)) %>% as.numeric # get pixel size attributes, and convert to numeric
nc = met[[1]]$coreMetadata$sizeC # number of channels in images
cn = sapply(1:nc,function(i)attr(ome[[1]]$OME$Image$Pixels[[i]],'Name'))# Get channel names
ipi = ips[1]
img = sk$io$imread(ipi)
print(img$shape) # Z,C,Y,X
if(!batch_mode){
vw = nap$Viewer()
vw$add_image(img, scale = ps, channel_axis = 1L)
nap$run()
rm(vw);gc()
}
kball = sk$morphology$ball(5L);kball = kball[c(3L,5L,9L),,] # Create Structuring Element
vw = nap$Viewer()
vw$add_image(img, scale = ps, channel_axis = 1L)
nap$run()
rm(vw);gc()
